pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID="717067475816"
        AWS_DEFAULT_REGION="us-east-1"
        IMAGE_REPO_NAME="ecr-test"
        IMAGE_TAG="v1"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
    }
   
    stages {
        
         stage('Logging into AWS ECR') {
            steps {
                script {
                sh """aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"""
                }
                 
            }
        }
        
        stage('Cloning Git') {
            steps {
              git branch: 'main', credentialsId: 'git-creds', url: 'https://github.com/srinivasabreddy1989/javahomehiring.git'
            }
        }
        stage('Git package') {
            steps {
                sh 'mvn clean package'
            }   
        }
  
    // Building Docker images
    stage('Docker Build') {
            steps {
                sh "docker build . -t ${REPOSITORY_URI}:${get_commit_id()}"
            }
        }
   
    // Uploading Docker images into AWS ECR
    stage('Docker push') {
        steps {
            sh "docker push ${REPOSITORY_URI}:${get_commit_id()}"
            // cleanup docker images in jenkins
            sh "docker system prune --all --force"
        }
    }
    }
    // sending email notifications for success and failure
    post {
        success {
            emailext to: "srinivasa20071989@gmail.com",
            subject: "jenkins build:${currentBuild.currentResult}: ${env.JOB_NAME}",
            body: "${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}"
  }
        failure {
            emailext to: "srinivasa20071989@gmail.com",
            subject: "jenkins build:${currentBuild.currentResult}: ${env.JOB_NAME}",
            body: "${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}"
        }
    }
    // Slack notification for success and failure
    post {
        success {
            slackSend channel: '#czv', color: 'green', failOnError: true, message: "${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}", tokenCredentialId: 'slack-token'
    }
        failure {
            slackSend channel: '#czv', color: 'red', failOnError: true, message: "${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}", tokenCredentialId: 'slack-token'
        }
    }
}
def get_commit_id(){
    id = sh returnStdout: true, script: 'git rev-parse --short HEAD'
    return id
}