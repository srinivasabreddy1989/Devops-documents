pipeline {
agent any
environment {
AWS_ACCOUNT_ID="717067475816"
AWS_DEFAULT_REGION="us-east-1"
IMAGE_REPO_NAME="ecr-test"
IMAGE_TAG="latest"
REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
}

stages {

stage(‘Logging into AWS ECR’) {
        steps {
            script {
                sh "aws ecr get-login-password -- region ${AWS_DEFAULT_REGION} | docker login — username AWS — password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
            }
        }
    }

stage('Git checkout') {
            steps {
                //checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-creds', url: 'https://github.com/srinivasabreddy1989/javahomehiring.git']])
                git branch: 'main', credentialsId: 'git-creds', url: 'https://github.com/srinivasabreddy1989/javahomehiring.git'
            }
        }
        stage('Git package') {
            steps {
                sh 'mvn clean package'
            }
        }
// Building Docker images
stage('image build') {
    steps {
        script {
            dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
        }
    }
}

// Uploading Docker images into AWS ECR
stage(‘Pushing to ECR’) {
        steps{
            script {
                sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
                sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }
    }
    // sending email notifications for success and failure
    post {
        success {
            emailext to: "srinivasa20071989@gmail.com",
            subject: "jenkins build:${currentBuild.currentResult}: ${env.JOB_NAME}",
            body: "${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}"
  }
        failure {
            emailext to: "srinivasa20071989@gmail.com",
            subject: "jenkins build:${currentBuild.currentResult}: ${env.JOB_NAME}",
            body: "${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}"
        }
    }
    // Slack notification for success and failure
    post {
        success {
            slackSend channel: '#czv', color: 'green', failOnError: true, message: "${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}", tokenCredentialId: 'slack-token'
    }
        failure {
            slackSend channel: '#czv', color: 'red', failOnError: true, message: "${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}", tokenCredentialId: 'slack-token'
        }
    }
}