Namespace:
    Viewing namespaces ---> kubectl get namespace
    Setting the namespace --> --namespace
    Setting the namespace preference --> kubectl config set-context --current  --namespace=<insert-namespace-name-here>
        kubectl config view --minify | grep namespace:
To see which Kubernetes resources are and aren't in a namespace:
    # In a namespace
    kubectl api-resources --namespaced=true

    # Not in a namespace
    kubectl api-resources --namespaced=false

Updating resources 
    kubectl set image deployment/myapp myapp=nginx              # Rolling update "www" containers of "frontend" deployment, updating the image
    kubectl rollout history deployment/frontend                      # Check the history of deployments including the revision
    kubectl rollout undo deployment/frontend                         # Rollback to the previous deployment
    kubectl rollout undo deployment/frontend --to-revision=2         # Rollback to a specific revision
    kubectl rollout status -w deployment/frontend  > To check rollout status
    kubectl rollout restart deployment/frontend  > To do the restart for deployment

Patching resources:
    kubectl patch node k8s-node-1 -p '{"spec":{"unschedulable":true}}' > # Partially update a node
Scaling resources 
    kubectl scale --current-replicas=2 --replicas=3 deployment/mysql  # If the deployment named mysql's current size is 2, scale mysql to 3
Interacting with running Pods 
    kubectl logs my-pod                                 # dump pod logs (stdout)
    kubectl run nginx --image=nginx -n mynamespace      # Start a single instance of nginx pod in the namespace of mynamespace
    kubectl exec --stdin --tty my-pod -- /bin/sh        # Interactive shell access to a running pod (1 container case)
    kubectl top pod POD_NAME --containers               # Show metrics for a given pod and its containers
Copying files and directories to and from containers 
    
    


